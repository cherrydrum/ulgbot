# -*- coding: utf-8 -*-
# ULGBOT. –û—á–µ–Ω—å —Å—Ç–∞—Ä–∞–ª—Å—è, –Ω–æ –≤—ã—à–ª–æ –∫–∞–∫ –≤—Å–µ–≥–¥–∞ :D
import requests
import json
import ast
import docx
import datetime
from PIL import Image
from PIL import ImageFont
from PIL import ImageDraw

#–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏, –Ω—É–∂–Ω—ã–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞.
emoji_dic = {u'–ê':u'üéµ', u'–ë':u'üí°', u'–í':u'üåø', u'–¢': 'üíæ'}
months = [u'—è–Ω–≤–∞—Ä—è', u'—Ñ–µ–≤—Ä–∞–ª—è', u'–º–∞—Ä—Ç–∞', u'–∞–ø—Ä–µ–ª—è', u'–º–∞—è', u'–∏—é–Ω—è', u'–∏—é–ª—è', u'–∞–≤–≥—É—Å—Ç–∞', u'—Å–µ–Ω—Ç—è–±—Ä—è', u'–æ–∫—Ç—è–±—Ä—è', u'–Ω–æ—è–±—Ä—è', u'–¥–µ–∫–∞–±—Ä—è'] 
classes = [u'8–ê', u'8–ë', u'8–í', u'8–¢', u'9–ê', u'9–ë', u'9–í', u'9–¢', u'10–ê', u'10–ë', u'10–í', u'10–¢', u'11–ê', u'11–ë', u'11–í', u'11–¢']

#–ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥.
try:
	config = open('settings.conf', 'r').read()
	config = {a.split('=')[0]: a.split(' = ')[1] for a in config.split('\n') if a != ''} 
except:
	print('[!!!] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!')
	exit()

post_token = config['user']
token = config['community']
version = config['version']
word_file_path = config['word_file_path']

print u'ulg_bot v{} \n'.format(version)
print '–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã...'

#–ß–∏—Ç–∞–µ–º –±–∞–∑—É.
try:
	file = open('userbase','r')
	ids = file.read()
	ids = ast.literal_eval(ids)
except:
	print('[!!!] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É!')
	exit()

def vk(method, params, token, ver):
	r = requests.get(u'https://api.vk.com/method/{}?{}&v={}&lang=0&access_token={}'.format(method, params, ver, token))
	out = r.text 
	json_out = json.loads(out)
	json_out = (json_out.get('response'))
	return json_out
def get_doc(path):
	try:
		print u'\n[*] –û—Ç–∫—Ä—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º...'
		document = docx.Document(path)
		basedic = {}
		print u'[*] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–∞–±–ª–∏—Ü—É...'
		for k in range(2):
			table = document.tables[k]
			a = table.columns
			for i, row in enumerate(a):
				key = a[i].cells[0].text
				lessons = [] 
				for j in range(5):
					lesson = {}
					b = a[i].cells[j+1].text
					if len(b.split('\n')) == 2:
						lesson['sbj'] = b.split('\n')[1]
						lesson['order'] = a[0].cells[j+1].text
						lesson['cab'] = b.split('\n')[0]
					else:
						lesson['sbj'] = b
						lesson['order'] = a[0].cells[j+1].text
					lesson.setdefault('cab', '-/-')
					lessons.append(lesson)
				basedic[key] = lessons

			basedic.pop('')
		print u'[*] –ì–æ—Ç–æ–≤–æ!\n'
		return(basedic)
	except:
		print('[!!!] –£–ø—Å, –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!')
		exit()
def genertatemessage(curclass, dic): #–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—ã 1 –∏–∑ –∫–ª–∞—Å—Å–æ–≤
	print u'[*] –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {}'.format(curclass)

	emoji = ''
	for key, value in emoji_dic.items():
		if curclass.find(key) != -1:
			emoji = emoji_dic.get(key)
	if type(emoji) == str:
		emoji = unicode(emoji, 'utf-8')

	now = datetime.datetime.now()
	date = u'{} {}'.format(now.day, months[now.month - 1])
	answer = u'üïí [{}]\n{} {} –∫–ª–∞—Å—Å\n–§–ï–ô–ö–û–í–û–ï'.format(date, emoji, curclass)
	lessons = dic.get(unicode(curclass))
	for lesson in lessons:
		if lesson.get('cab') == '-/-':
			answer = answer + u'\n{order}: {sbj}'.format(**lesson)
		elif lesson.get('sbj') == '':
			answer = answer + u'\n{order}: ---'.format(**lesson)
		else:
			answer = answer + u'\n{order}: {sbj} (–ö–∞–±. {cab})'.format(**lesson)
	return(answer)
def base_add(uid, bid, reply):
	bid = bid.encode('utf-8')
	base = ids.get(bid)
	if base.count(uid) == 0:
		print '[A] –î–æ–±–∞–≤–ª—è—é {} –≤ {}...'.format(uid, bid)
		base.append(uid)
		basedict = {bid:base}
		ids.update(basedict)
		send_one(uid, '‚ö° –í–∞—à ID –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É —Ä–∞—Å—Å–ª—ã–∫–∏ {}.'.format(bid), reply)
	else:
		print '[D] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.'
		send_one(uid, '‚õî –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É {}.'.format(bid), reply)
def base_remove(uid, bid, reply):
	bid = bid.encode('utf-8')
	base = ids.get(bid)
	if base.count(uid) >= 1:
		print '[A] –£–¥–∞–ª—è—é {} –∏–∑ {}...'.format(uid, bid)
		base.remove(uid)
		basedict = {bid:base}
		ids.update(basedict)
		send_one(uid, '‚ö° –í–∞—à ID –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã —Ä–∞—Å—Å–ª—ã–∫–∏ {}.'.format(bid), reply)
	else:
		print '[D] –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –Ω–µ—Ç.'
		send_one(uid, '‚õî –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å–ª—ã–∫—É {}.'.format(bid), reply)
def send(usergroup, message):
	userids = str(ids.get(usergroup))
	userids = userids.replace('[', '')
	userids = userids.replace(']', '')	
	userids = userids.replace(' ', '')
	if type(message) == str:
		message = unicode(message, 'utf-8')
	r = requests.get(u'https://api.vk.com/method/messages.send?user_ids={}&message={}&v=3.0&lang=0&access_token={}'.format(userids, message, token))
def send_one(uid, message, reply):
	if type(message) == str:
		message = unicode(message, 'utf-8')
	r = requests.get(u'https://api.vk.com/method/messages.send?user_id={}&message={}&forward_messages={}&v=3.0&lang=0&access_token={}'.format(uid, message, reply, token))
def get_new_users():
	print '\n[*] –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...' 
	jso = vk('messages.getConversations', 'filter=unread&count=200', token, '3.0')
	for i in range(len(jso) - 2):
		cur = str(i + 1)
		usr_req = jso.get(cur) #–í–≤–æ–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —á—Ç–æ–± –Ω–µ —Ç—è–≥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–æ–≤–∞—Ä—è.
		usr_req = usr_req.get('last_message')
		usr_reqid = usr_req.get('from_id')
		buf = vk('messages.getHistory', 'user_id={}'.format(usr_reqid), token, '3.0')
		buf.pop(0)
		buf.reverse()
		for k in range(len(buf)):
			dic = buf[k]
			read = str(dic.get('read_state'))
			if read == '0' and dic.get('from_id') == usr_reqid:
				print u'[*] –ó–∞–ø—Ä–æ—Å –æ—Ç {}: {}'.format(usr_reqid, dic.get('body'))
				agregate_message((dic.get('body')).upper(), usr_reqid, dic.get('mid'))

	print '[*] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'	
def agregate_message(message, uid, reply):
	message = message.upper()
	try: 
		if message == u'–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï':
			send_one(uid, ids, reply) #–ù—É–∂–Ω–æ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã –∞–¥—Ä–µ—Å–∞–Ω—Ç–æ–≤, –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.
		else:
			base_id = message.split(' ')[1]
			if message.split(' ')[0] == u'–ü–û–î–ü–ò–®–ò': 
				base_add(uid, base_id, reply)
			elif message.split(' ')[0] == u'–û–¢–ü–ò–®–ò':
				base_remove(uid, base_id, reply)
			else:
				send_one(uid, u'üò∞ –ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.', reply)
				print '[!] –û—à–∏–±–∫–∞ –æ—Ç {}, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.'.format(uid)		

	except IndexError:
			send_one(uid, u'üò∞ –ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.', reply)
			print '[!] –û—à–∏–±–∫–∞ –æ—Ç {}, IndexError.'.format(uid)





get_new_users() #–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.

print '\n[A] –ó–∞–ø–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑—É...'
file = open('userbase','w')
file.write(str(ids))
file.close()

print u'–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º...\n–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É?\n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –≤–∞–∂–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.'
ans = raw_input('–û—Ç–≤–µ—Ç: ').decode('utf-8')
a = get_doc(word_file_path) #–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Word

print u'[–†–ê–°–°–´–õ–ö–ê]'
for key, value in ids.items(): #–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é.
	i = key.decode('utf-8')
	send(key, (genertatemessage(i, a)))
	if ans != '':
		send(key, (u'üìï –í–Ω–∏–º–∞–Ω–∏–µ, {}'.format(ans)))


#–ö—É—Å–æ–∫ –∫–æ–¥–∞, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –ø–æ—Å—Ç–∏–Ω–≥.
#–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Å–∞–º—É –∫–∞—Ä—Ç–∏–Ω–∫—É.
a = get_doc(word_file_path)
'[*] –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É...'
img = Image.open("in.jpg")
draw = ImageDraw.Draw(img)
font = ImageFont.truetype("font.ttf", 14)

now = datetime.datetime.now()
date = u'{} {}'.format(now.day, months[now.month - 1])
draw.text((40, 30),u'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –Ω–∞ {}.'.format(date),(41,41,41),font=ImageFont.truetype("header.ttf", 45))

x = 40 #–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ç–∫–∏, –∫—É—á–∞ –∫–æ—Å—Ç—ã–ª–µ–π, –¥–∞-–¥–∞.
y = 95
sample = 95
counter = 0
for c in classes:
	draw.text((x, y),c ,(41,41,41),font=ImageFont.truetype("header.ttf", 25))
	y += 40
	for i in a.get(c):
		if i.get('order') == u'–°–ö':
			draw.text((x, y),u'–°–ö: {sbj}'.format(**i),(41,41,41),font=ImageFont.truetype("font.ttf", 11))
		elif i.get('order') == u'0':
			draw.text((x, y),u'0: {sbj}'.format(**i),(41,41,41),font=ImageFont.truetype("font.ttf", 11)) 
		else:
			if len(i.get('sbj')) > 14:
				draw.text((x, y),u'{sbj}'.format(**i),(41,41,41),font=ImageFont.truetype("font.ttf", 8))
			else:
				draw.text((x, y),u'{sbj}'.format(**i),(41,41,41),font=font)
			y += 15
			draw.text((x, y),u'–ö–∞–±. {cab}'.format(**i),(41,41,41),font=ImageFont.truetype("font.ttf", 10))
		y += 20
	x += 120
	counter += 1
	if counter == 8:
		sample = 300
		x = 40
	y = sample
print '[*] –°–æ—Ö—Ä–∞–Ω—è—é...'
img.save('out.jpg')

#–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
print '[*] –û—Ç–ø—Ä–∞–≤–ª—è—é...'
p_img = open('out.jpg', 'rb')
try:
	#–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –º—Ä–∞–∫–æ–±–µ—Å–∏–µ. –ë–µ–∑ —Å—Ç–∞ –≥—Ä–∞–º–º –Ω–µ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è.
	url = vk('photos.getWallUploadServer', '174539192', post_token, '3.0') 
	url = url.get('upload_url')
	img_post = requests.post(url, files={'file1': p_img})
	img_post = json.loads(img_post.text)
	photo_json = img_post.get('photo')
	img_save = requests.get('https://api.vk.com/method/photos.saveWallPhoto?photo={}&server={}&hash={}&v=5.92&lang=0&access_token={}'.format(photo_json, int(img_post.get('server')), img_post.get('hash'), post_token))
	img_save = json.loads(img_save.text).get('response')[0]
	link = 'photo{}_{}'.format(img_save.get('owner_id'), img_save.get('id'))
	img_post = requests.get('https://api.vk.com/method/wall.post?owner_id=-174539192&from_group=1&attachments={}&v=5.92&lang=0&access_token={}'.format(link, post_token))
except:
	print('[!!!] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç–µ–Ω—É! –ü–∏–Ω–∞–π—Ç–µ –ö–æ–ª—é!') #–¢–æ–ª—å–∫–æ –Ω–µ—Å–∏–ª—å–Ω–æ.
	exit()

